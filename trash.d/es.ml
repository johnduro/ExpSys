# 13 "es.mll"
 
	type tokenz =
		| ParentIn
		| ParentOut
		| Not
		| And
		| Or
		| Xor
		| Impl
		| Ifoif
		| TrueFacts
		| Requests
		| Fact of char
		| NewLine

# 18 "es.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\240\255\241\255\242\255\243\255\244\255\001\000\002\000\
    \248\255\249\255\250\255\251\255\252\255\253\255\254\255\002\000\
    \247\255\029\000\246\255\002\000\253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\014\000\010\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\021\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\015\000\003\000\015\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \015\000\011\000\015\000\014\000\000\000\000\000\000\000\000\000\
    \013\000\012\000\000\000\010\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\007\000\017\000\005\000\
    \016\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\018\000\000\000\000\000\008\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\015\000\019\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\015\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\006\000\000\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec tokenLex lst lexbuf =
    __ocaml_lex_tokenLex_rec lst lexbuf 0
and __ocaml_lex_tokenLex_rec lst lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 31 "es.mll"
                  ( tokenLex lst lexbuf )
# 127 "es.ml"

  | 1 ->
# 32 "es.mll"
           ( comment lst lexbuf )
# 132 "es.ml"

  | 2 ->
# 45 "es.mll"
           ( tokenLex (lst @ [ParentIn]) lexbuf )
# 137 "es.ml"

  | 3 ->
# 46 "es.mll"
           ( tokenLex (lst @ [ParentOut]) lexbuf )
# 142 "es.ml"

  | 4 ->
# 47 "es.mll"
           ( tokenLex (lst @ [Not]) lexbuf )
# 147 "es.ml"

  | 5 ->
# 48 "es.mll"
           ( tokenLex (lst @ [And]) lexbuf )
# 152 "es.ml"

  | 6 ->
# 49 "es.mll"
           ( tokenLex (lst @ [Or]) lexbuf )
# 157 "es.ml"

  | 7 ->
# 50 "es.mll"
           ( tokenLex (lst @ [Xor]) lexbuf )
# 162 "es.ml"

  | 8 ->
# 51 "es.mll"
            ( tokenLex (lst @ [Impl]) lexbuf )
# 167 "es.ml"

  | 9 ->
# 52 "es.mll"
             ( tokenLex (lst @ [Ifoif]) lexbuf )
# 172 "es.ml"

  | 10 ->
# 53 "es.mll"
           ( tokenLex (lst @ [TrueFacts]) lexbuf )
# 177 "es.ml"

  | 11 ->
# 54 "es.mll"
           ( tokenLex (lst @ [Requests]) lexbuf )
# 182 "es.ml"

  | 12 ->
let
# 55 "es.mll"
                    fact
# 188 "es.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 55 "es.mll"
                         ( tokenLex (lst @ [(Fact fact)]) lexbuf )
# 192 "es.ml"

  | 13 ->
# 56 "es.mll"
            ( tokenLex (lst @ [NewLine]) lexbuf )
# 197 "es.ml"

  | 14 ->
let
# 57 "es.mll"
        err
# 203 "es.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 57 "es.mll"
               ( raise (invalid_arg ("invalid char : " ^ (Char.escaped err))) )
# 207 "es.ml"

  | 15 ->
# 58 "es.mll"
           ( lst )
# 212 "es.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tokenLex_rec lst lexbuf __ocaml_lex_state

and comment lst lexbuf =
    __ocaml_lex_comment_rec lst lexbuf 19
and __ocaml_lex_comment_rec lst lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 60 "es.mll"
            ( tokenLex (lst @ [NewLine]) lexbuf )
# 223 "es.ml"

  | 1 ->
# 61 "es.mll"
          ( comment lst lexbuf )
# 228 "es.ml"

  | 2 ->
# 62 "es.mll"
           ( lst )
# 233 "es.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lst lexbuf __ocaml_lex_state

;;

# 64 "es.mll"
 
(* let rec printMyList ls = *)
(* 	match ls with *)
(* 	| [] -> print_char '\n' *)
(* 	| hd::tl -> print_endline hd ; printMyList tl *)
let rec printMyList ls =
	match ls with
	| [] -> print_char '\n'
	| hd::tl ->
		begin
			match hd with
			| ParentIn 	-> print_string " -( " ; printMyList tl
			| ParentOut 	-> print_string " )- " ; printMyList tl
			| Not		-> print_string " NOT" ; printMyList tl
			| Or		-> print_string " OR " ; printMyList tl
			| And		-> print_string " AND " ; printMyList tl
			| Xor		-> print_string " XOR " ; printMyList tl
			| Impl		-> print_string " => " ; printMyList tl
			| Ifoif		-> print_string " <=> " ; printMyList tl
			| TrueFacts -> print_string " TRUE FACTS : " ; printMyList tl
			| Requests	-> print_string " REQUEST : " ; printMyList tl
			| Fact (fx) -> print_string (" -" ^ (Char.escaped fx)^ "- ") ; printMyList tl
			| NewLine	-> print_string "  -NL-\n" ; printMyList tl
		end

let main () =
	let cin = if Array.length Sys.argv > 1
		then open_in Sys.argv.(1)
		else stdin
	in
	let lexbuf = Lexing.from_channel cin in
	let returnList = tokenLex [] lexbuf in
	printMyList returnList;
	print_endline "yolo"

let () = main ()

# 277 "es.ml"
