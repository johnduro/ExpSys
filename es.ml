# 13 "es.mll"
 
	(* type tokenz = *)
	(* 	| Parentesis *)
	(* 	| Not *)
	(* 	| And *)
	(* 	| Or *)
	(* 	| Xor *)
	(* 	| Impl *)
	(* 	| Ifoif *)

# 13 "es.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\240\255\241\255\242\255\243\255\244\255\001\000\002\000\
    \248\255\249\255\250\255\251\255\252\255\253\255\254\255\002\000\
    \247\255\029\000\246\255\002\000\253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\014\000\010\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\021\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\015\000\003\000\015\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \015\000\011\000\015\000\014\000\000\000\000\000\000\000\000\000\
    \013\000\012\000\000\000\010\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\007\000\017\000\005\000\
    \016\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\018\000\000\000\000\000\008\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\015\000\019\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\015\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\006\000\000\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lst lexbuf =
    __ocaml_lex_token_rec lst lexbuf 0
and __ocaml_lex_token_rec lst lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 26 "es.mll"
                  ( token lst lexbuf )
# 122 "es.ml"

  | 1 ->
# 27 "es.mll"
           ( comment lst lexbuf )
# 127 "es.ml"

  | 2 ->
# 28 "es.mll"
           ( token (lst @ ["("]) lexbuf )
# 132 "es.ml"

  | 3 ->
# 29 "es.mll"
           ( token (lst @ [")"]) lexbuf )
# 137 "es.ml"

  | 4 ->
# 30 "es.mll"
           ( token (lst @ ["!"]) lexbuf )
# 142 "es.ml"

  | 5 ->
# 31 "es.mll"
           ( token (lst @ ["+"]) lexbuf )
# 147 "es.ml"

  | 6 ->
# 32 "es.mll"
           ( token (lst @ ["|"]) lexbuf )
# 152 "es.ml"

  | 7 ->
# 33 "es.mll"
           ( token (lst @ ["^"]) lexbuf )
# 157 "es.ml"

  | 8 ->
# 34 "es.mll"
            ( token (lst @ ["=>"]) lexbuf )
# 162 "es.ml"

  | 9 ->
# 35 "es.mll"
             ( token (lst @ ["<=>"]) lexbuf )
# 167 "es.ml"

  | 10 ->
# 36 "es.mll"
           ( token (lst @ ["="]) lexbuf )
# 172 "es.ml"

  | 11 ->
# 37 "es.mll"
           ( token (lst @ ["?"]) lexbuf )
# 177 "es.ml"

  | 12 ->
let
# 38 "es.mll"
                    fact
# 183 "es.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 38 "es.mll"
                         ( token (lst @ [(Char.escaped fact)]) lexbuf )
# 187 "es.ml"

  | 13 ->
# 39 "es.mll"
            ( token (lst @ ["NL"]) lexbuf )
# 192 "es.ml"

  | 14 ->
let
# 40 "es.mll"
        err
# 198 "es.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 40 "es.mll"
               ( raise (invalid_arg ("invalid char : " ^ (Char.escaped err))) )
# 202 "es.ml"

  | 15 ->
# 41 "es.mll"
           ( lst )
# 207 "es.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lst lexbuf __ocaml_lex_state

and comment lst lexbuf =
    __ocaml_lex_comment_rec lst lexbuf 19
and __ocaml_lex_comment_rec lst lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "es.mll"
            ( token lst lexbuf )
# 218 "es.ml"

  | 1 ->
# 44 "es.mll"
          ( comment lst lexbuf )
# 223 "es.ml"

  | 2 ->
# 45 "es.mll"
           ( lst )
# 228 "es.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lst lexbuf __ocaml_lex_state

;;

# 47 "es.mll"
 
let rec printMyList ls =
	match ls with
	| [] -> print_char '\n'
	| hd::tl -> print_endline hd ; printMyList tl

let main () =
	let cin = if Array.length Sys.argv > 1
		then open_in Sys.argv.(1)
		else stdin
	in
	let lexbuf = Lexing.from_channel cin in
	let returnList = token [] lexbuf in
	printMyList returnList;
	print_endline "yolo"

let () = main ()

# 253 "es.ml"
